LAB JAX-WS with glassfish server
================================

	Agenda:
	
	1. Hello World WS

	2. Consuming an ws publically available

	3. JAX-WS annotations

	4. Using Interface Server side SEI

	5. Using JAXB annotations

	6. Handling faults

	7. Hello world using tomcat
	
		
	

Intrduction to JAX-WS Overview
-------------------------------

	=> JAX-WS is a JEE specification for building message oriented /RPC oriented web services

	=> Minimum coding , JAX-WS API hides the complexity form developer

	=> JAX-WS 2.0 supports the Web Services Interoperability (WS-I) Basic Profile Version 1.1 

	=> JAX-WS is also one of the foundations of web service interoperability Technologies (WSIT). 

	=> RI of JAX-WS project Metro that also include Tango which handles the WSIT

	=> Java Version 6 onwards JAX-WS can be used in Java SE 


--------------------------------
Approaches for WS Development
--------------------------------


	1. bottom-up approach
	--------------------
		Bottom-up approach: Start with Java Classes

	2. top-down approach
	 -------------------
		Top-down approach: Start with WSDL





	Hello World example
	======================

	steps:
		1. Creating our Web Service Endpoint
		2. Creating the Web Service Client using wsimport command.


	1. Creating Web Service Endpoint
	com.demo

	@WebService
	public class Calculator {
		@WebMethod
		public int sum(int param1, int param2) {
			return param1 + param2;
		}

		@WebMethod
		public int multiply(int param1, int param2) {
			return param1 * param2;
		}
	}




	 Endpoint.publish("http://localhost:8080/hello-ws/CalculatorService", new Calculator());


	http://localhost:8080/hello-ws/CalculatorService?wsdl

	2. Creating WS client
	
		From src of client project 
		wsimport -target 2.0 -keep http://localhost:8080/jaxws/HelloWs?wsdl

		wsimport -target 2.0 -keep http://localhost:8080/demo/CalculatorService?wsdl



	What is  wsimport ?
		==> The wsimport command-line tool processes an existing WSDL file and generates 
			the required portable support classes (SEI) for developing JAX-WS web service applications 

		==>Essentially, it is going to automatically generate all of the class files involved with the SOAP, 
			XML and communication aspects of our web service!


  	    CalculatorService service = new CalculatorService();

        //create proxy
        Calculator proxy = service.getCalculatorPort();

        int a = new Integer("22").intValue();
        int b = new Integer("33").intValue();
        
        //invoke
        System.out.println("Sum of the arguments = " + proxy.sum(a,b));
	    System.out.println("Multiple of the arguments = " + proxy.multiply(a,b));



	http://stackoverflow.com/questions/9601107/the-constructor-serviceurl-qname-webservicefeature-is-undefined




	Customization of wsdl: Using annotations
	---------------------------------------



	The @SOAPBinding annotation
	------------------------------
	=> By default the JAX-WS runtime engine uses the wrapped doc/literal SOAP binding if you dont specify any. 

	=> To specify the required SOAP binding you can use the @SOAPBinding annotation.

	Attributes of @SOAPBinding annotation
	-------------------------------------

	style: The values can be either DOCUMENT or RPC
 
	use: The values can be LITERAL or ENCODED
 
	parameterStyle: The value can be BARE or WRAPPED.

	The @WebMethod annotation
	------------------------
	=> @WebMethod annotation provides the information that is normally represented in the 
	wsdl:operation element in WSDL. 

	=> This indicates the operation to which the method is associated.

	Attributes of @WebMethod annotation
	-------------------------------------
 
	operationName: Indicates the value of the associated wsdl:operation element’s name
		(Default value is the name of the method).

 	action: This attribute specifies the value of the soapAction attribute of the soap:operation element for the method in WSDL. 
		(Default value is an empty string).

 	exclude: Specifies whether the method should be excluded from the service interface
	(Default is false. But it is recommended that the SEI ideally should contain only the required 
		methods which are required to be published)






	The @RequestWrapper and @ResponseWrapper annotations
	---------------------------------------------------
	=> These annotations are placed on the methods in service endpoint interface.
 
	The @RequestWrapper specifies the Java class that implements the wrapper bean for
	 the method parameters that are included in the request message sent in a remote invocation and the

	 @ResponseWrapper specifies the Java class that implements the wrapper bean for the method parameters 
	that are included in the response message sent in a remote invocation.

	=> These annotations have localName, targetNamespace and className attributes and only className is mandatory.



	The @WebFault annotation
	---------------------------
	=> The @WebFault annotation is used to map the Java exception to a wsdl:fault element.
	 @WebFault is placed on exceptions that are thrown by your SEI.
	 This has the the attributes name, targetNamespace and faultName attributes



	The @Oneway annotation
	----------------------
	The @Oneway annotation is placed on the methods in the SEI that will not
	 require a response from the service. 
	The runtime does not wait for a response and will not reserve any resource to process a response.


	The @WebParam annotation
	---------------------------
	=> The @WebParam annotation allows you to specify the direction of the parameter, 
	if the parameter will be placed in the SOAP header,
	 and other properties of the generated wsdl:part. 

	=> This annotation is placed on the parameters on the methods defined in the SEI.
	 This annotation has the following attributes.

 	name: Specifies the name of the parameter as it appears in the WSDL. 
	For RPC bindings, this is name of the wsdl:part representing the parameter. 
	For document bindings, this is the local name of the XML element representing the parameter.

 	targetNamespace: Indicates the namespace for the parameter(Defaults is to use the service’s namespace).

 	mode: Indicates the direction of the web parameter. Values can be Mode.IN (default) ,Mode.OUT or Mode.INOUT

	head: This indicates if the parameter is passed as part of the SOAP header. 
		Values can be Mode.IN (default) ,Mode.OUT or Mode.INOUT

	partName: Indicates the value of the name attribute of the wsdl:part element for 
	the parameter when the binding is document





	The @WebResult annotation
	-------------------------
	The @WebResult annotation allows you to specify the properties 
	of the generated wsdl:part that is generated for the method’s return value.

	 This annotation is placed on the methods defined in the SEI. 
	This annotations has name, targetNamespace, header and partName attributes in
 	which header specifies if the return value is passed as part of the SOAP header.



		
	Let start with and example to customized wsdl file
	-------------------------------------------------------

	@XmlRootElement
	public class Foo {
		private String value1;
		private String value2;
		//.....


	@WebService
	public interface HelloSEI {
		public Foo sayHello(String value1, String value2);
	}


	@WebService(endpointInterface="com.demo.HelloSEI")
	public  class HelloSEIImp implements HelloSEI {
	
		@Override
		public Foo sayHello(String value1, String value2) {
			// TODO Auto-generated method stub
			return null;
		}
	
	}



	Endpoint.publish("http://localhost:8080/spring-ws/HelloSEIImpService?wsdl", new HelloSEIImp());



	Now using @WebService annotation:
	--------------------------------
	
	@WebService:  should be placed on an interface and implementation class
	-------------------------------------------------------------------------

	name==> name of web service mapped to the name attribute of the wsdl:portType

	serviceName==>actual name of published service, mapped to name wsdl:service element in WSDL document
			(Default value is name of SEI implementation class)

	targetNamespace==> Secifies the target namespace under which the service is defined.(Default value is package name)

 	wsdlLocation==>  Specifies the URI at which the service’s WSDL contract is stored. 
			(Default value is the URI at which the service is deployed)




  	endpointInterface==>  Specifies the full name of the SEI that the implementation class implements
				(This attribute is used in implementation class)

	
	portName=> The name of the endpoint at which the service is published and 
		is mapped to the name attribute of the wsdl:port element in WSDL contract document
			(Default value is the append Port to the name of the service’s implementation class.
			This is used in implementation class).







	More Annotations,Create an web service:
	=======================================


	Ex:


	@WebService(serviceName = "CalculatorWS")
	public class Calculator {

		@WebMethod
		public int sum(@WebParam (name= "value1") int value1, @WebParam( name="value2" ) int value2) {
			return value1 + value2;
		}

	}



	Another example:
	--------------


	@WebService(name="ShoppingCartCatalog" , portName="ShoppingCartPort",
 	serviceName="ShoppingCartService", targetNamespace="http://www.shoppingcart.com")

	public class ProductCatalog {

	@WebMethod(action="getShoppingCartCategories", operationName="getShoppingCartCategoriesOperation")
		public List<String> getProductCategories(){
			List<String>list=new ArrayList<>();
			list.add("laptop");
			list.add("books");
			list.add("games");
			return list;
		}
	}







	Using Interface: design to interface , Server side SEI
	========================================================



	@WebService
	public interface ProductCalegoriesInterface {

		public abstract List<Product> getProductCategories();

	}

	@WebService(endpointInterface="com.erric.ProductCalegoriesInterface")
	public class ProductCatalog implements ProductCalegoriesInterface {

		@Override
		@WebMethod
		@WebResult(name="Product")
		public List<Product> getProductCategories(){
			List<Product>list=new ArrayList<>();
			list.add(new Product("121", "TV", 5555.7));
			list.add(new Product("21", "Laptop", 25555.7));
			list.add(new Product("121", "Mouse", 5.6));
			return list;
		}
	}



	















	Using JAXB annotations	xml <--> java
	=========================================
	Create an POJO with annotations:

	@XmlRootElement
	@XmlType(propOrder={"id","name","price"})

	public class Product {
		private String name;
		private String id;
		private double price;
	
		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		@XmlElement(name="ProductName")
		public String getName() {
			return name;
		}


	//Dont forget to have default ctr in POJO class...
	Create an web service:


	@WebService
	public class ProductCatalog {

		@WebMethod
		@WebResult(name="Product")
		public List<Product> getProductCategories(){
			List<Product>list=new ArrayList<>();
			list.add(new Product("121", "TV", 5555.7));
			list.add(new Product("21", "Laptop", 25555.7));
			list.add(new Product("121", "Mouse", 5.6));
			return list;
		}
	}










	Handling faults
	====================

	Create User defind exception:

	public class InvalidInputException extends Exception {

		private static final long serialVersionUID = 1L;
		private String errorDetails;

		public InvalidInputException(String reason, String errorDetails) {
			super(reason);
			this.errorDetails=errorDetails;
		
		}
		public String getFaultInfo(){
			return errorDetails;
		}
	
	}



	Creating Web service:


	@WebService
	public class ShopInfo {

		@WebMethod
		@WebResult(name = "shopOutput")
		public String getShopInfo(@WebParam(partName = "shopInput") String property)
				throws InvalidInputException {
			String response = null;
			if ("shopName".equals(property))
				response = "Mega Mart";
			else if ("since".equals(property))
				response = "2001";
			else
				throw new InvalidInputException("invalid input", property
					+ " not found!");
			return response;
		}
	}







	Hello world using tomcat
	=============================



	We are going to use JAX-WS RI (Metro) in Tomcat
	https://jax-ws.java.net/

	Steps: 

	1. Create an dyanmic web project with tomcat in eclipse
	2. Copy jar files in the lib (JAX-WS Ri)
	3. Write Web service Endpoint and implemetation classes
	4. write web.xml

		listner-com.sun.xml.ws.transport.http.servlet.WSServletContextListener
		Servlet-com.sun.xml.ws.transport.http.servlet.WSServlet

	<listener>
		<listener-class>com.sun.xml.ws.transport.http.servlet.WSServletContextListener</listener-class>
	</listener>
	<servlet>
		<servlet-name>jax-ws</servlet-name>
		<servlet-class>com.sun.xml.ws.transport.http.servlet.WSServlet</servlet-class>

	</servlet>
	<servlet-mapping>
		<servlet-name>jax-ws</servlet-name>
		<url-pattern>/req</url-pattern>
	</servlet-mapping>



	5. Write sun-jaxws.xml
	6. Generate jaxb classes for input and output type using wsgen command
	7. Deploy the application.


	4. Create an WS and Server side SEI
		com.demo


	@WebService
	public interface Calculator {
		public int add(int a,int b);

	}



	@WebService(endpointInterface="com.demo.Calculator")
		public class CalculatorImp implements Calculator {

		@Override
		public int add(int a, int b) {

			return a + b;
		}

	}


	sun-jaxws.xml
	----------------

	<?xml version="1.0" encoding="UTF-8"?>
	<endpoints xmlns="http://java.sun.com/xml/ns/jax-ws/ri/runtime"
		version="2.0">
		<endpoint name="Calculator" implementation="com.demo.CalculatorImp"
			url-pattern="/req" />
	</endpoints>








	Consuming an ws publically available
	=======================================

	consider an publically available WS:
		http://www.webservicex.net/ws/WSDetails.aspx?CATID=12&WSID=64
		WS to get country; taking IP as input!

	Steps:
	1. create an new project from src
	2. issue command wsimport -keep http://www.webservicex.net/geoipservice.asmx?WSDL

	3. Calling WS
		GeoIPService ips=new GeoIPService();
		GeoIPServiceSoap ipsSoap=ips.getGeoIPServiceSoap();

		GeoIP ip=ipsSoap.getGeoIP("173.194.36.99");//ping google.com
		System.out.println(ip.getCountryName());
